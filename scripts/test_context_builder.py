#!/usr/bin/env python3
"""
Test Context Builder Service
Sprint 11 - Chatbot BI

Test de categorizaci√≥n de keywords (sin requerir API running)
"""

import sys
from pathlib import Path

# A√±adir src/fastapi-app al path
sys.path.insert(0, str(Path(__file__).parent.parent / "src" / "fastapi-app"))

# Mock settings para evitar crear /app/models
import os
os.environ['ML_MODELS_DIR'] = str(Path(__file__).parent.parent / 'models')

from services.chatbot_context_service import ChatbotContextService


def test_context_builder():
    """Test del context builder con diferentes tipos de preguntas."""

    service = ChatbotContextService()

    test_questions = [
        "¬øCu√°ndo debo producir hoy?",
        "¬øCu√°l es el precio actual de la energ√≠a?",
        "¬øHay alguna alerta activa?",
        "¬øCu√°nto hemos ahorrado esta semana?",
        "Dame un resumen general del sistema",
    ]

    print("üß™ Test Context Builder Service\n")
    print("=" * 60)

    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. Pregunta: '{question}'")
        print("-" * 60)

        try:
            # Detectar categor√≠as
            question_lower = question.lower()
            categories = service._detect_categories(question_lower)
            print(f"   Categor√≠as detectadas: {categories if categories else 'general (fallback)'}")

            # Construir contexto (requiere API running)
            # context = await service.build_context(question)
            # estimated_tokens = len(context) // 4
            # print(f"   Tokens estimados: ~{estimated_tokens}")
            # print(f"   Contexto (preview):\n{context[:200]}...")

        except Exception as e:
            print(f"   ‚ùå Error: {e}")

    print("\n" + "=" * 60)
    print("‚úÖ Test de categorizaci√≥n completado")
    print("\n‚ö†Ô∏è  Para test completo, aseg√∫rate de tener la API corriendo:")
    print("   docker compose up -d chocolate_factory_brain")


if __name__ == "__main__":
    test_context_builder()

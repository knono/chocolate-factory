[
    {
        "id": "main_flow",
        "type": "tab",
        "label": "üç´ Chocolate Factory",
        "disabled": false,
        "info": "Main monitoring dashboard for Chocolate Factory"
    },
    {
        "id": "ui_base",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE", 
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            }
        },
        "site": {
            "name": "üç´ Chocolate Factory Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ui_tab_main",
        "type": "ui_tab",
        "name": "Main Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ui_group_metrics",
        "type": "ui_group",
        "name": "üìä Real-time Metrics",
        "tab": "ui_tab_main",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_group_trends",
        "type": "ui_group",
        "name": "üìà Trends",
        "tab": "ui_tab_main",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "real_data_inject",
        "type": "inject",
        "z": "main_flow",
        "name": "Get Real Data",
        "props": [{"p": "payload"}],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [["get_ree_data", "get_weather_data"]]
    },
    {
        "id": "get_ree_data",
        "type": "http request",
        "z": "main_flow",
        "name": "Get REE Price",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://fastapi-app:8000/ree/prices?hours=6",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 80,
        "wires": [["process_ree_data"]]
    },
    {
        "id": "process_ree_data",
        "type": "function",
        "z": "main_flow",
        "name": "Process REE Data",
        "func": "// Extract real energy price from REE API response with variation\nlet price = 0.15; // fallback\nif (msg.payload && msg.payload.data && msg.payload.data.length > 0) {\n    // Get random price from the last 6 hours to show variation\n    const randomIndex = Math.floor(Math.random() * msg.payload.data.length);\n    const priceEurMwh = parseFloat(msg.payload.data[randomIndex].price_eur_mwh);\n    price = priceEurMwh / 1000; // Convert MWh to kWh\n}\n\n// For the gauge (current price)\nmsg.payload = parseFloat(price.toFixed(4));\nmsg.topic = \"energy_price\";\n\n// Create a separate message for the chart\nconst chartMsg = {\n    payload: parseFloat(price.toFixed(4)),\n    topic: \"Energy Price\"  // This becomes the series name\n};\n\nreturn [msg, chartMsg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 80,
        "wires": [["energy_price_gauge"], ["price_trend_chart"]]
    },
    {
        "id": "energy_price_gauge",
        "type": "ui_gauge",
        "z": "main_flow",
        "name": "Energy Price",
        "group": "ui_group_metrics",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "‚ö° Energy Price",
        "label": "‚Ç¨/kWh",
        "format": "{{value}}",
        "min": 0,
        "max": "0.4",
        "colors": ["#00b04f","#e6e600","#ca3838"],
        "seg1": "0.15",
        "seg2": "0.25",
        "className": "",
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "get_weather_data",
        "type": "http request",
        "z": "main_flow",
        "name": "Get Weather Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://fastapi-app:8000/weather/openweather",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 160,
        "wires": [["process_weather_data"]]
    },
    {
        "id": "process_weather_data",
        "type": "function",
        "z": "main_flow",
        "name": "Process Weather Data",
        "func": "// Extract real temperature and humidity from custom API response\nlet temp = 22; // fallback\nlet humidity = 55; // fallback\n\n// The API returns emoji-formatted response, extract temperature\nif (msg.payload && msg.payload['üå°Ô∏è']) {\n    // Extract temperature from '39.11¬∞C' format\n    const tempStr = msg.payload['üå°Ô∏è'];\n    temp = parseFloat(tempStr.replace('¬∞C', '')) || 22;\n}\n\n// Extract humidity from '12.0%' format\nif (msg.payload && msg.payload['üíß']) {\n    const humidityStr = msg.payload['üíß'];\n    humidity = parseFloat(humidityStr.replace('%', '')) || 55;\n}\n\n// Create temperature message\nconst tempMsg = {\n    payload: parseFloat(temp.toFixed(1)),\n    topic: \"temperature\"\n};\n\n// Create humidity message\nconst humidityMsg = {\n    payload: parseFloat(humidity.toFixed(1)),\n    topic: \"humidity\"\n};\n\nreturn [tempMsg, humidityMsg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [["temperature_gauge"], ["humidity_gauge"]]
    },
    {
        "id": "temperature_gauge",
        "type": "ui_gauge",
        "z": "main_flow",
        "name": "Temperature",
        "group": "ui_group_metrics",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "üå°Ô∏è Temperature",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": 45,
        "colors": ["#00b04f","#e6e600","#ca3838"],
        "seg1": "20",
        "seg2": "30",
        "className": "",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "humidity_gauge",
        "type": "ui_gauge",
        "z": "main_flow",
        "name": "Humidity",
        "group": "ui_group_metrics",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "üíß Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": ["#ca3838","#00b04f","#ca3838"],
        "seg1": "40",
        "seg2": "70",
        "className": "",
        "x": 570,
        "y": 180,
        "wires": []
    },
    {
        "id": "fastapi_health_check",
        "type": "http request",
        "z": "main_flow",
        "name": "FastAPI Health",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://fastapi-app:8000/health",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 240,
        "wires": [["system_status_text"]]
    },
    {
        "id": "api_test_inject",
        "type": "inject",
        "z": "main_flow",
        "name": "Test API Every 30s",
        "props": [{"p": "payload"}],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 2,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 240,
        "wires": [["fastapi_health_check"]]
    },
    {
        "id": "system_status_text",
        "type": "ui_text",
        "z": "main_flow",
        "group": "ui_group_metrics",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "System Status",
        "label": "üè≠ System Status:",
        "format": "{{payload.status}}",
        "layout": "row-spread",
        "className": "",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "price_trend_chart",
        "type": "ui_chart",
        "z": "main_flow",
        "name": "Energy Price Trend",
        "group": "ui_group_trends",
        "order": 1,
        "width": 12,
        "height": 6,
        "label": "‚ö° Energy Price Trend (Live Data)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Collecting data...",
        "dot": false,
        "ymin": "0.1",
        "ymax": "0.35",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": ["#1f77b4","#aec7e8","#ff7f0e"],
        "outputs": 1,
        "x": 500,
        "y": 200,
        "wires": [[]]
    }
]
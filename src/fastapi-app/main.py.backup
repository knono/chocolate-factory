"""
TFM Chocolate Factory - FastAPI Main Application
=================================================

El Cerebro Autónomo: FastAPI + APScheduler para automatización completa
- Endpoints: /predict y /ingest-now
- Automatización: APScheduler para ingestión y predicciones periódicas
- Simulación: SimPy/SciPy para lógica de fábrica
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import logging
from contextlib import asynccontextmanager
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from pydantic import BaseModel

from services.scheduler import get_scheduler_service, start_scheduler, stop_scheduler
from services.data_ingestion import DataIngestionService, run_current_ingestion, run_daily_ingestion
from services.ree_client import REEClient
from services.aemet_client import AEMETClient
from services.openweathermap_client import OpenWeatherMapClient
from services.initialization import InitializationService
from services.initialization.historical_ingestion import HistoricalDataIngestion

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestión del ciclo de vida de la aplicación"""
    logger.info("🧠 Iniciando El Cerebro Autónomo - Chocolate Factory Brain")
    
    try:
        # Iniciar el scheduler automático
        await start_scheduler()
        logger.info("📅 APScheduler: Iniciado correctamente")
        logger.info("🏭 SimPy: Simulación pendiente")
        
        yield
        
    finally:
        # Detener el scheduler al cerrar la aplicación
        logger.info("🛑 Deteniendo El Cerebro Autónomo")
        await stop_scheduler()
        logger.info("📅 APScheduler: Detenido")


# Crear la aplicación FastAPI
app = FastAPI(
    title="TFM Chocolate Factory - El Cerebro Autónomo",
    description="Sistema autónomo de ingestión, predicción y monitoreo para fábrica de chocolate",
    version="0.1.0",
    lifespan=lifespan
)

# Configurar CORS para Node-RED dashboard
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producción, especificar dominios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Modelos Pydantic para requests
class IngestionRequest(BaseModel):
    source: str = "ree"  # ree, aemet, all
    date_start: Optional[str] = None
    date_end: Optional[str] = None
    force_refresh: bool = False

class WeatherRequest(BaseModel):
    station_ids: Optional[List[str]] = None  # Default to Madrid area
    include_forecast: bool = False

class SchedulerJobRequest(BaseModel):
    job_id: str
    action: str  # trigger, pause, resume


@app.get("/")
async def root():
    """Endpoint raíz - Estado del sistema"""
    return {
        "service": "TFM Chocolate Factory Brain",
        "status": "🧠 El Cerebro Autónomo está funcionando",
        "version": "0.1.0",
        "endpoints": {
            "health": "/health",
            "predict": "/predict (pendiente)",
            "ingest": "/ingest-now",
            "scheduler": "/scheduler/status",
            "ree_prices": "/ree/prices",
            "aemet_weather": "/aemet/weather", 
            "openweather": "/weather/openweather",
            "openweather_forecast": "/weather/openweather/forecast",
            "openweather_status": "/weather/openweather/status",
            "weather_comparison": "/weather/comparison",
            "hybrid_weather": "/weather/hybrid",
            "aemet_token": "/aemet/token/status",
            "influxdb_verify": "/influxdb/verify",
            "init_status": "/init/status",
            "init_historical": "/init/historical-data",
            "init_all": "/init/all",
            "aemet_stations": "/aemet/stations",
            "aemet_token_renew": "/aemet/token/renew",
            "docs": "/docs"
        }
    }


@app.get("/health")
async def health_check():
    """Health check para Docker"""
    return {
        "status": "healthy",
        "service": "chocolate_factory_brain",
        "message": "🧠 Sistema operativo"
    }


@app.get("/predict")
async def predict(hours_ahead: int = 24, include_features: bool = True):
    """🔮 Endpoint de predicción ML con datos reales InfluxDB para features"""
    try:
        async with DataIngestionService() as service:
            query_api = service.client.query_api()
            
            # Query recent energy prices for feature engineering
            energy_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -7d)
                |> filter(fn: (r) => r._measurement == "energy_prices")
                |> filter(fn: (r) => r._field == "price_eur_kwh")
                |> sort(columns: ["_time"], desc: true)
                |> limit(n: 168)
            '''
            
            # Query recent weather data for features
            weather_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -7d)
                |> filter(fn: (r) => r._measurement == "weather_data")
                |> filter(fn: (r) => r._field == "temperature" or r._field == "humidity")
                |> sort(columns: ["_time"], desc: true)
                |> limit(n: 300)
            '''
            
            energy_results = query_api.query(energy_query)
            weather_results = query_api.query(weather_query)
            
            # Process energy data for features
            energy_features = []
            for table in energy_results:
                for record in table.records:
                    energy_features.append({
                        "timestamp": record.get_time().isoformat(),
                        "price_eur_kwh": record.get_value(),
                        "source": record.values.get("source", "REE")
                    })
            
            # Process weather data for features  
            weather_features = []
            for table in weather_results:
                for record in table.records:
                    weather_features.append({
                        "timestamp": record.get_time().isoformat(),
                        "field": record.get_field(),
                        "value": record.get_value(),
                        "source": record.values.get("source", "unknown")
                    })
            
            # Calculate feature statistics
            if energy_features:
                recent_prices = [f["price_eur_kwh"] for f in energy_features[:24]]
                avg_price_24h = sum(recent_prices) / len(recent_prices) if recent_prices else 0
                max_price_7d = max(f["price_eur_kwh"] for f in energy_features)
                min_price_7d = min(f["price_eur_kwh"] for f in energy_features)
            else:
                avg_price_24h = max_price_7d = min_price_7d = 0
            
            # Extract temperature features
            temp_data = [f for f in weather_features if f["field"] == "temperature"]
            if temp_data:
                recent_temp = temp_data[0]["value"] if temp_data else 20
                avg_temp_24h = sum(f["value"] for f in temp_data[:24]) / min(24, len(temp_data)) if temp_data else 20
            else:
                recent_temp = avg_temp_24h = 20
            
            # Chocolate production optimization index (simple formula)
            chocolate_optimization_score = 100 - (avg_price_24h * 2) - max(0, avg_temp_24h - 25) * 3
            
            prediction_response = {
                "🏭": "TFM Chocolate Factory - Predicción ML",
                "status": "✅ Datos reales InfluxDB procesados",
                "prediction_horizon": f"{hours_ahead} horas",
                "model_status": "🚧 MLflow integration pendiente",
                "data_summary": {
                    "energy_records": len(energy_features),
                    "weather_records": len(weather_features),
                    "data_coverage": "7 días históricos"
                },
                "prediction": {
                    "chocolate_production_score": round(chocolate_optimization_score, 2),
                    "recommendation": "Alto" if chocolate_optimization_score > 80 else "Medio" if chocolate_optimization_score > 60 else "Bajo",
                    "energy_cost_forecast": f"{avg_price_24h:.3f} EUR/kWh promedio",
                    "temperature_forecast": f"{avg_temp_24h:.1f}°C promedio"
                },
                "timestamp": datetime.now().isoformat()
            }
            
            if include_features:
                prediction_response["features"] = {
                    "energy_metrics": {
                        "avg_price_24h": round(avg_price_24h, 4),
                        "max_price_7d": round(max_price_7d, 4),
                        "min_price_7d": round(min_price_7d, 4),
                        "price_volatility": round(max_price_7d - min_price_7d, 4)
                    },
                    "weather_metrics": {
                        "current_temperature": recent_temp,
                        "avg_temperature_24h": round(avg_temp_24h, 2),
                        "heat_stress_factor": max(0, avg_temp_24h - 25)
                    },
                    "sample_data": {
                        "latest_energy": energy_features[:3],
                        "latest_weather": weather_features[:3]
                    }
                }
            
            return prediction_response
            
    except Exception as e:
        logger.error(f"Prediction with InfluxDB features failed: {e}")
        return {
            "status": "error",
            "message": str(e),
            "note": "Error al consultar features desde InfluxDB para predicción"
        }


@app.post("/ingest-now")
async def ingest_now(request: IngestionRequest, background_tasks: BackgroundTasks):
    """Forzar ingestión inmediata de datos"""
    try:
        logger.info(f"Manual ingestion requested for source: {request.source}")
        
        if request.source == "ree":
            # Ejecutar en background para no bloquear la respuesta
            background_tasks.add_task(run_current_ingestion)
            message = "📥 Ingestión REE iniciada en background"
        elif request.source == "aemet":
            async def run_aemet_ingestion():
                async with DataIngestionService() as service:
                    await service.ingest_current_weather()
            background_tasks.add_task(run_aemet_ingestion)
            message = "🌤️ Ingestión AEMET iniciada en background"
        elif request.source == "openweathermap":
            async def run_owm_ingestion():
                async with DataIngestionService() as service:
                    await service.ingest_openweathermap_weather()
            background_tasks.add_task(run_owm_ingestion)
            message = "🌍 Ingestión OpenWeatherMap iniciada en background"
        elif request.source == "weather" or request.source == "hybrid":
            async def run_hybrid_ingestion():
                async with DataIngestionService() as service:
                    await service.ingest_hybrid_weather()
            background_tasks.add_task(run_hybrid_ingestion)
            message = "🌤️🌍 Ingestión híbrida AEMET+OpenWeatherMap iniciada en background"
        elif request.source == "all":
            background_tasks.add_task(run_current_ingestion)
            async def run_aemet_ingestion():
                async with DataIngestionService() as service:
                    await service.ingest_current_weather()
            background_tasks.add_task(run_aemet_ingestion)
            message = "📥🌤️ Ingestión REE y AEMET iniciada en background"
        else:
            raise HTTPException(status_code=400, detail=f"Unsupported source: {request.source}")
        
        return {
            "status": "started",
            "message": message,
            "source": request.source,
            "timestamp": datetime.now().isoformat()
        }
            
    except Exception as e:
        logger.error(f"Manual ingestion failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# Nuevos endpoints para REE y scheduler
@app.get("/ree/prices")
async def get_ree_prices(hours: int = 24):
    """Obtener precios REE de las próximas N horas"""
    try:
        async with REEClient() as client:
            if hours == 1:
                current_price = await client.get_current_price()
                return {
                    "status": "success",
                    "data": [current_price.dict()] if current_price else [],
                    "hours_requested": hours
                }
            else:
                prices = await client.get_price_forecast_24h()
                limited_prices = prices[:hours] if prices else []
                return {
                    "status": "success", 
                    "data": [price.dict() for price in limited_prices],
                    "hours_requested": hours,
                    "records_returned": len(limited_prices)
                }
                
    except Exception as e:
        logger.error(f"Failed to fetch REE prices: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/scheduler/status")
async def get_scheduler_status():
    """Obtener estado del scheduler y trabajos programados"""
    try:
        scheduler = await get_scheduler_service()
        status = scheduler.get_job_status()
        return {
            "status": "success",
            "scheduler": status,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Failed to get scheduler status: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/scheduler/job")
async def manage_scheduler_job(request: SchedulerJobRequest):
    """Gestionar trabajos del scheduler (trigger, pause, resume)"""
    try:
        scheduler = await get_scheduler_service()
        
        if request.action == "trigger":
            success = await scheduler.trigger_job_now(request.job_id)
        elif request.action == "pause":
            success = await scheduler.pause_job(request.job_id)
        elif request.action == "resume":
            success = await scheduler.resume_job(request.job_id)
        else:
            raise HTTPException(status_code=400, detail=f"Invalid action: {request.action}")
        
        if success:
            return {
                "status": "success",
                "message": f"Job {request.job_id} {request.action} completed",
                "job_id": request.job_id,
                "action": request.action
            }
        else:
            raise HTTPException(status_code=400, detail=f"Failed to {request.action} job {request.job_id}")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to manage scheduler job: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/ingestion/status")
async def get_ingestion_status():
    """Obtener estado de la ingestion de datos"""
    try:
        async with DataIngestionService() as service:
            status = await service.get_ingestion_status()
        
        return {
            "status": "success",
            "ingestion": status,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Failed to get ingestion status: {e}")
        raise HTTPException(status_code=500, detail=str(e))




@app.get("/weather/openweather")
async def get_openweather_linares():
    """🌤️ OpenWeatherMap - Datos en tiempo real para Linares, Jaén"""
    try:
        async with OpenWeatherMapClient() as client:
            # Get API status first
            status = await client.get_api_status()
            
            if status["status"] == "active":
                # Get current weather data
                current_weather = await client.get_current_weather()
                
                if current_weather:
                    return {
                        "🏭": "TFM Chocolate Factory - OpenWeatherMap",
                        "📍": "Linares, Jaén (38.151107°N, -3.629453°W)",
                        "🌡️": f"{current_weather.temperature}°C",
                        "💧": f"{current_weather.humidity}%",
                        "🌬️": f"{current_weather.wind_speed} km/h" if current_weather.wind_speed else "N/A",
                        "📊": f"{current_weather.pressure} hPa" if current_weather.pressure else "N/A",
                        "🕐": current_weather.timestamp.isoformat(),
                        "📡": "OpenWeatherMap API v2.5",
                        "station_id": current_weather.station_id,
                        "data_source": "openweathermap",
                        "status": "✅ Datos en tiempo real",
                        "api_status": status
                    }
                else:
                    return {
                        "status": "error",
                        "message": "No weather data available",
                        "api_status": status
                    }
            else:
                # API key not active yet
                return {
                    "🏭": "TFM Chocolate Factory - OpenWeatherMap",
                    "📍": "Linares, Jaén",
                    "status": "⏳ API key pending activation",
                    "message": "OpenWeatherMap API keys can take up to 2 hours to activate",
                    "api_status": status,
                    "note": "El cliente está implementado y funcionará cuando la API key se active"
                }
        
    except Exception as e:
        logger.error(f"OpenWeatherMap endpoint error: {e}")
        return {
            "status": "error", 
            "message": str(e),
            "note": "API key may still be activating"
        }


@app.get("/weather/openweather/forecast")
async def get_openweather_forecast(hours: int = 24):
    """🌤️ OpenWeatherMap - Pronóstico por horas para Linares, Jaén"""
    try:
        async with OpenWeatherMapClient() as client:
            # Get API status first
            status = await client.get_api_status()
            
            if status["status"] == "active":
                # Get forecast data
                forecast_data = await client.get_forecast(hours)
                
                if forecast_data:
                    forecast_list = []
                    for item in forecast_data:
                        forecast_list.append({
                            "timestamp": item.timestamp.isoformat(),
                            "temperature": item.temperature,
                            "humidity": item.humidity,
                            "pressure": item.pressure,
                            "wind_speed": item.wind_speed,
                            "wind_direction": item.wind_direction
                        })
                    
                    return {
                        "🏭": "TFM Chocolate Factory - OpenWeatherMap Forecast",
                        "📍": "Linares, Jaén (38.151107°N, -3.629453°W)",
                        "status": "✅ Pronóstico disponible",
                        "hours_requested": hours,
                        "records_returned": len(forecast_list),
                        "data": forecast_list,
                        "api_status": status
                    }
                else:
                    return {
                        "status": "error",
                        "message": "No forecast data available",
                        "api_status": status
                    }
            else:
                return {
                    "🏭": "TFM Chocolate Factory - OpenWeatherMap Forecast",
                    "📍": "Linares, Jaén",
                    "status": "⏳ API key pending activation",
                    "message": "OpenWeatherMap API keys can take up to 2 hours to activate",
                    "api_status": status
                }
        
    except Exception as e:
        logger.error(f"OpenWeatherMap forecast endpoint error: {e}")
        return {
            "status": "error", 
            "message": str(e),
            "note": "API key may still be activating"
        }


@app.get("/weather/openweather/status")
async def get_openweather_status():
    """🌤️ OpenWeatherMap - Estado de la API y conectividad"""
    try:
        async with OpenWeatherMapClient() as client:
            status = await client.get_api_status()
            
            return {
                "🏭": "TFM Chocolate Factory - OpenWeatherMap API Status",
                "timestamp": datetime.now().isoformat(),
                "api_status": status,
                "integration_status": "✅ Cliente implementado y configurado",
                "coordinates": "Linares, Jaén (38.151107°N, -3.629453°W)",
                "api_version": "OpenWeatherMap v2.5 (free tier)"
            }
        
    except Exception as e:
        logger.error(f"OpenWeatherMap status endpoint error: {e}")
        return {
            "status": "error", 
            "message": str(e),
            "integration_status": "❌ Error en cliente"
        }


@app.get("/weather/hybrid")
async def get_hybrid_weather(force_openweathermap: bool = False):
    """🌤️🌍 Estrategia híbrida: AEMET (00:00-07:00) + OpenWeatherMap (08:00-23:00)"""
    try:
        current_hour = datetime.now().hour
        use_aemet = (0 <= current_hour <= 7) and not force_openweathermap
        
        async with DataIngestionService() as service:
            if use_aemet:
                # Try AEMET first
                try:
                    aemet_data = await service.ingest_aemet_weather()
                    if aemet_data.successful_writes > 0:
                        return {
                            "🏭": "TFM Chocolate Factory - Estrategia Híbrida",
                            "📍": "Linares, Jaén",
                            "⚡": "AEMET (datos oficiales)",
                            "🕐": f"Hora {current_hour:02d}:xx - Ventana de observación oficial",
                            "status": "✅ Datos AEMET ingestados",
                            "records": aemet_data.successful_writes,
                            "strategy": "aemet_official",
                            "fallback": "OpenWeatherMap disponible si falla AEMET"
                        }
                except Exception:
                    pass  # Fall through to OpenWeatherMap
            
            # Use OpenWeatherMap
            owm_data = await service.ingest_openweathermap_weather()
            source_reason = "ventana tiempo real" if not use_aemet else "fallback por fallo AEMET"
            
            return {
                "🏭": "TFM Chocolate Factory - Estrategia Híbrida", 
                "📍": "Linares, Jaén",
                "⚡": "OpenWeatherMap (tiempo real)",
                "🕐": f"Hora {current_hour:02d}:xx - {source_reason}",
                "status": "✅ Datos OpenWeatherMap ingestados",
                "records": owm_data.successful_writes,
                "strategy": "openweathermap_realtime",
                "precision": "Datos actualizados cada 10 minutos"
            }
        
    except Exception as e:
        logger.error(f"Hybrid weather strategy failed: {e}")
        return {
            "status": "error",
            "message": str(e),
            "strategy": "hybrid_failed"
        }


@app.get("/weather/comparison")
async def get_weather_comparison(hours: int = 24):
    """📊 Comparación AEMET vs OpenWeather desde datos reales InfluxDB"""
    try:
        async with DataIngestionService() as service:
            query_api = service.client.query_api()
            
            # Query AEMET data from InfluxDB
            aemet_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -{hours}h)
                |> filter(fn: (r) => r._measurement == "weather_data")
                |> filter(fn: (r) => r.source == "AEMET")
                |> filter(fn: (r) => r._field == "temperature" or r._field == "humidity")
                |> sort(columns: ["_time"], desc: true)
                |> limit(n: 20)
            '''
            
            # Query OpenWeatherMap data from InfluxDB
            openweather_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -{hours}h)
                |> filter(fn: (r) => r._measurement == "weather_data")
                |> filter(fn: (r) => r.source == "OpenWeatherMap")
                |> filter(fn: (r) => r._field == "temperature" or r._field == "humidity")
                |> sort(columns: ["_time"], desc: true)
                |> limit(n: 20)
            '''
            
            aemet_results = query_api.query(aemet_query)
            openweather_results = query_api.query(openweather_query)
            
            # Process AEMET data
            aemet_data = {"temperature": None, "humidity": None, "last_update": None, "count": 0}
            for table in aemet_results:
                for record in table.records:
                    field = record.get_field()
                    value = record.get_value()
                    timestamp = record.get_time()
                    
                    if field == "temperature" and aemet_data["temperature"] is None:
                        aemet_data["temperature"] = value
                        aemet_data["last_update"] = timestamp.isoformat()
                    elif field == "humidity" and aemet_data["humidity"] is None:
                        aemet_data["humidity"] = value
                    
                    aemet_data["count"] += 1
            
            # Process OpenWeatherMap data
            openweather_data = {"temperature": None, "humidity": None, "last_update": None, "count": 0}
            for table in openweather_results:
                for record in table.records:
                    field = record.get_field()
                    value = record.get_value()
                    timestamp = record.get_time()
                    
                    if field == "temperature" and openweather_data["temperature"] is None:
                        openweather_data["temperature"] = value
                        openweather_data["last_update"] = timestamp.isoformat()
                    elif field == "humidity" and openweather_data["humidity"] is None:
                        openweather_data["humidity"] = value
                    
                    openweather_data["count"] += 1
            
            # Calculate comparison stats
            temp_diff = None
            if aemet_data["temperature"] and openweather_data["temperature"]:
                temp_diff = abs(aemet_data["temperature"] - openweather_data["temperature"])
            
            return {
                "🏭": "TFM Chocolate Factory - Comparación Datos Reales InfluxDB",
                "location": "Linares, Jaén, Andalucía",
                "query_period": f"Últimas {hours} horas",
                "comparison": {
                    "🇪🇸 AEMET (desde InfluxDB)": {
                        "temperature": f"{aemet_data['temperature']}°C" if aemet_data['temperature'] else "Sin datos",
                        "humidity": f"{aemet_data['humidity']}%" if aemet_data['humidity'] else "Sin datos",
                        "last_update": aemet_data['last_update'] or "Sin datos",
                        "records_found": aemet_data['count'],
                        "reliability": "⭐⭐⭐⭐⭐ Oficial AEMET"
                    },
                    "🌍 OpenWeatherMap (desde InfluxDB)": {
                        "temperature": f"{openweather_data['temperature']}°C" if openweather_data['temperature'] else "Sin datos",
                        "humidity": f"{openweather_data['humidity']}%" if openweather_data['humidity'] else "Sin datos", 
                        "last_update": openweather_data['last_update'] or "Sin datos",
                        "records_found": openweather_data['count'],
                        "reliability": "⭐⭐⭐⭐ Tiempo real"
                    }
                },
                "analysis": {
                    "temperature_difference": f"{temp_diff:.1f}°C" if temp_diff else "No comparable",
                    "data_availability": {
                        "aemet_coverage": "✅" if aemet_data['count'] > 0 else "❌ Sin datos",
                        "openweather_coverage": "✅" if openweather_data['count'] > 0 else "❌ Sin datos"
                    }
                },
                "recommendation": "Datos reales desde InfluxDB - Estrategia híbrida funcionando",
                "timestamp": datetime.now().isoformat()
            }
            
    except Exception as e:
        logger.error(f"Weather comparison query failed: {e}")
        return {
            "status": "error",
            "message": str(e),
            "note": "Error al consultar comparación meteorológica en InfluxDB"
        }


@app.get("/aemet/weather")
async def get_aemet_weather(station_ids: Optional[str] = None):
    """🌤️ DATOS REALES de AEMET Linares - Para verificar con móvil"""
    try:
        station_list = ["5279X"] if not station_ids else [s.strip() for s in station_ids.split(",")]
        
        weather_data = []
        async with AEMETClient() as client:
            for station_id in station_list:
                try:
                    # Direct API call to get real AEMET data for Linares
                    data = await client._make_request(f"observacion/convencional/datos/estacion/{station_id}")
                    if 'datos' in data:
                        response = await client.client.get(data['datos'])
                        response.raise_for_status()
                        raw_data = response.json()
                        
                        if raw_data and len(raw_data) > 0:
                            latest = raw_data[-1]
                            logger.info(f"✅ DATOS REALES AEMET {station_id}: {latest}")
                            
                            # Create beautiful response with real data
                            weather_data.append({
                                "🏭": "TFM Chocolate Factory - Datos Reales",
                                "📍": f"Linares, Jaén ({station_id})",
                                "🌡️": f"{latest.get('ta', 'N/A')}°C" if latest.get('ta') else "N/A",
                                "💧": f"{latest.get('hr', 'N/A')}%" if latest.get('hr') else "N/A", 
                                "🌬️": f"{latest.get('vv', 'N/A')} km/h" if latest.get('vv') else "N/A",
                                "☔": f"{latest.get('prec', 0)} mm",
                                "📊": f"{latest.get('pres', 'N/A')} hPa" if latest.get('pres') else "N/A",
                                "🕐": latest.get('fint', 'N/A'),
                                "📡": f"AEMET {station_id}",
                                "station_name": latest.get('ubi', 'LINARES'),
                                "total_records_today": len(raw_data),
                                "raw_data": latest  # Para depuración
                            })
                        else:
                            weather_data.append({
                                "error": f"No data for station {station_id}",
                                "station_id": station_id
                            })
                    else:
                        weather_data.append({
                            "error": f"No 'datos' field for station {station_id}",
                            "station_id": station_id
                        })
                        
                except Exception as e:
                    logger.error(f"Error fetching {station_id}: {e}")
                    weather_data.append({
                        "error": str(e),
                        "station_id": station_id
                    })
        
        return {
            "status": "✅ Datos meteorológicos reales de AEMET",
            "location": "Linares, Jaén, Andalucía", 
            "data": weather_data,
            "stations_requested": len(station_list),
            "records_returned": len(weather_data),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"AEMET weather endpoint failed: {e}")
        return {"error": str(e), "status": "failed"}


@app.get("/aemet/token/status")
async def get_aemet_token_status():
    """Obtener estado del token AEMET"""
    try:
        async with AEMETClient() as client:
            status = await client.get_token_status()
        
        return {
            "status": "success",
            "token_info": status,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Failed to get AEMET token status: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/aemet/token/renew")
async def renew_aemet_token():
    """Forzar renovación del token AEMET"""
    try:
        async with AEMETClient() as client:
            # Force token renewal by requesting a new one
            new_token = await client._request_new_token()
        
        return {
            "status": "success",
            "message": "Token AEMET renovado exitosamente",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Failed to renew AEMET token: {e}")
        raise HTTPException(status_code=500, detail=str(e))


















@app.get("/influxdb/verify")
async def verify_influxdb_data(hours: int = 6):
    """🔍 Verificar datos almacenados en InfluxDB - Query simple"""
    try:
        async with DataIngestionService() as service:
            # Check InfluxDB connection
            health = service.client.health()
            
            if health.status != "pass":
                return {
                    "status": "error",
                    "message": "InfluxDB no está saludable",
                    "health": health.status
                }
            
            query_api = service.client.query_api()
            
            # Query REE energy prices
            ree_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -{hours}h)
                |> filter(fn: (r) => r._measurement == "energy_prices")
                |> filter(fn: (r) => r._field == "price_eur_kwh")
                |> sort(columns: ["_time"], desc: true)
                |> limit(n: 10)
            '''
            
            # Query weather data  
            weather_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -{hours}h)
                |> filter(fn: (r) => r._measurement == "weather_data")
                |> filter(fn: (r) => r._field == "temperature")
                |> sort(columns: ["_time"], desc: true)
                |> limit(n: 10)
            '''
            
            ree_results = query_api.query(ree_query)
            weather_results = query_api.query(weather_query)
            
            # Process results
            ree_data = []
            for table in ree_results:
                for record in table.records:
                    ree_data.append({
                        "timestamp": record.get_time().isoformat(),
                        "price_eur_kwh": record.get_value(),
                        "source": record.values.get("source", "REE")
                    })
            
            weather_data = []
            for table in weather_results:
                for record in table.records:
                    weather_data.append({
                        "timestamp": record.get_time().isoformat(),
                        "temperature": record.get_value(),
                        "source": record.values.get("source", "unknown"),
                        "station_id": record.values.get("station_id", "unknown")
                    })
            
            return {
                "🏭": "TFM Chocolate Factory - InfluxDB Verification",
                "status": "✅ InfluxDB funcionando correctamente",
                "health": health.status,
                "bucket": service.config.bucket,
                "org": service.config.org,
                "query_range": f"{hours} horas",
                "data": {
                    "energy_prices": {
                        "records_found": len(ree_data),
                        "latest_data": ree_data[:3],
                        "measurement": "energy_prices"
                    },
                    "weather_data": {
                        "records_found": len(weather_data),
                        "latest_data": weather_data[:3],
                        "measurement": "weather_data"
                    }
                },
                "total_records": len(ree_data) + len(weather_data),
                "limitation_note": "⚠️ This endpoint shows LATEST 10 records only (sorted desc by time). For total counts use /influxdb/count",
                "alternatives": {
                    "total_count": "/influxdb/count",
                    "system_status": "/init/status"
                },
                "timestamp": datetime.now().isoformat()
            }
            
    except Exception as e:
        logger.error(f"InfluxDB verification failed: {e}")
        return {
            "status": "error",
            "message": str(e),
            "note": "Error al verificar datos en InfluxDB"
        }


@app.get("/influxdb/count")
async def count_influxdb_records(years: int = 5):
    """🔢 Contar registros reales en InfluxDB - Query de conteo preciso"""
    try:
        async with DataIngestionService() as service:
            # Check InfluxDB connection
            health = service.client.health()
            
            if health.status != "pass":
                return {
                    "status": "error",
                    "message": "InfluxDB no está saludable",
                    "health": health.status
                }
            
            query_api = service.client.query_api()
            
            # Count REE energy prices
            ree_count_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -{years*365*24}h)
                |> filter(fn: (r) => r._measurement == "energy_prices")
                |> filter(fn: (r) => r._field == "price_eur_kwh")
                |> count()
            '''
            
            # Count weather data  
            weather_count_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -{years*365*24}h)
                |> filter(fn: (r) => r._measurement == "weather_data")
                |> filter(fn: (r) => r._field == "temperature")
                |> count()
            '''
            
            # Count all records (total)
            total_count_query = f'''
                from(bucket: "{service.config.bucket}")
                |> range(start: -{years*365*24}h)
                |> count()
            '''
            
            ree_results = query_api.query(ree_count_query)
            weather_results = query_api.query(weather_count_query)
            total_results = query_api.query(total_count_query)
            
            # Process count results
            ree_count = 0
            for table in ree_results:
                for record in table.records:
                    ree_count += record.get_value()
            
            weather_count = 0
            for table in weather_results:
                for record in table.records:
                    weather_count += record.get_value()
            
            total_count = 0
            for table in total_results:
                for record in table.records:
                    total_count += record.get_value()
            
            return {
                "🏭": "TFM Chocolate Factory - InfluxDB Record Count",
                "status": "✅ Conteo completado",
                "health": health.status,
                "bucket": service.config.bucket,
                "org": service.config.org,
                "query_range": f"{years} años",
                "counts": {
                    "energy_prices_records": ree_count,
                    "weather_data_records": weather_count,
                    "total_records": total_count,
                    "other_records": max(0, total_count - ree_count - weather_count)
                },
                "discrepancy_analysis": {
                    "init_status_reported": 31038,
                    "actual_ree_records": ree_count,
                    "difference": 31038 - ree_count,
                    "note": "init/status uses hardcoded values, this endpoint queries actual DB"
                },
                "timestamp": datetime.now().isoformat()
            }
            
    except Exception as e:
        logger.error(f"InfluxDB count failed: {e}")
        return {
            "status": "error",
            "message": str(e),
            "note": "Error al contar registros en InfluxDB"
        }


@app.get("/aemet/stations")
async def get_aemet_stations():
    """Obtener lista de estaciones meteorológicas AEMET - Jaén"""
    try:
        async with AEMETClient() as client:
            stations = await client.get_weather_stations()
        
        # Filter for Jaén province stations if we get a full list
        jaen_stations = []
        for station in stations:
            if "jaén" in station.get("provincia", "").lower() or "jaen" in station.get("provincia", "").lower():
                jaen_stations.append(station)
        
        # If no stations found from API, return known Jaén stations
        if not jaen_stations:
            jaen_stations = [
                {
                    "indicativo": "5279X",
                    "nombre": "LINARES, VOR",
                    "provincia": "JAÉN",
                    "altitud": 515,
                    "latitud": "38°5'31\"N",
                    "longitud": "3°38'6\"W"
                },
                {
                    "indicativo": "5298X",
                    "nombre": "ANDÚJAR",
                    "provincia": "JAÉN", 
                    "altitud": 202,
                    "latitud": "38°2'24\"N",
                    "longitud": "4°3'36\"W"
                }
            ]
        
        return {
            "status": "success",
            "data": jaen_stations,
            "total_stations": len(jaen_stations),
            "returned_stations": len(jaen_stations),
            "timestamp": datetime.now().isoformat(),
            "location": "Provincia de Jaén, Andalucía"
        }
        
    except Exception as e:
        logger.error(f"Failed to get AEMET stations: {e}")
        # Fallback to known Jaén stations
        fallback_stations = [
            {
                "indicativo": "5279X",
                "nombre": "LINARES, VOR",
                "provincia": "JAÉN",
                "altitud": 515,
                "latitud": "38°5'31\"N",
                "longitud": "3°38'6\"W"
            },
            {
                "indicativo": "5298X", 
                "nombre": "ANDÚJAR",
                "provincia": "JAÉN",
                "altitud": 202,
                "latitud": "38°2'24\"N",
                "longitud": "4°3'36\"W"
            }
        ]
        
        return {
            "status": "success",
            "data": fallback_stations,
            "total_stations": len(fallback_stations),
            "returned_stations": len(fallback_stations),
            "timestamp": datetime.now().isoformat(),
            "location": "Provincia de Jaén, Andalucía",
            "note": "Datos de estaciones conocidas - Error en API AEMET"
        }


# =============================================================================
# INITIALIZATION ENDPOINTS
# =============================================================================

@app.get("/init/status")
async def get_initialization_status():
    """🚀 Verificar estado de inicialización del sistema"""
    try:
        async with InitializationService() as service:
            status = await service.get_initialization_status()
        
        return {
            "🏭": "TFM Chocolate Factory - Initialization Status",
            "timestamp": datetime.now().isoformat(),
            "status": status,
            "actions": {
                "init_historical_data": "/init/historical-data",
                "init_all": "/init/all"
            }
        }
    except Exception as e:
        logger.error(f"Failed to get initialization status: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/init/historical-data")
async def initialize_historical_data(background_tasks: BackgroundTasks):
    """🚀 Inicializar datos históricos REE (2022-2024) - ~17K registros"""
    try:
        logger.info("🚀 Starting historical data initialization")
        
        async def run_historical_init():
            async with InitializationService() as service:
                stats = await service.initialize_historical_data_only()
                logger.info(f"✅ Historical initialization completed: {stats.historical_ree_records} records")
        
        background_tasks.add_task(run_historical_init)
        
        return {
            "🏭": "TFM Chocolate Factory - Historical Data Initialization",
            "status": "started",
            "message": "📊 Carga histórica REE (2022-2024) iniciada en background",
            "expected_records": "~17,520 registros (2 años post-COVID)",
            "estimated_duration": "30-60 minutos",
            "monitoring": {
                "progress": "/init/status",
                "data_verification": "/influxdb/verify?hours=26280"  # Check 3 years
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Failed to start historical initialization: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/init/all")
async def initialize_all_systems(background_tasks: BackgroundTasks):
    """🚀 Inicialización completa del sistema (históricos + sintéticos)"""
    try:
        logger.info("🚀 Starting complete system initialization")
        
        async def run_full_init():
            async with InitializationService() as service:
                stats = await service.initialize_all()
                logger.info(f"✅ Full initialization completed: {stats.historical_ree_records} REE + {stats.synthetic_weather_records} weather records")
        
        background_tasks.add_task(run_full_init)
        
        return {
            "🏭": "TFM Chocolate Factory - Complete System Initialization",
            "status": "started",
            "message": "🚀 Inicialización completa iniciada en background",
            "components": {
                "historical_ree": "📊 Datos REE 2022-2024 (~17K registros)",
                "synthetic_weather": "🌤️ Weather sintético coherente",
                "system_checks": "🔧 Verificaciones de conectividad",
                "database_schemas": "🗄️ Inicialización schemas InfluxDB"
            },
            "estimated_duration": "45-90 minutos",
            "monitoring": {
                "progress": "/init/status",
                "data_verification": "/influxdb/verify"
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Failed to start full initialization: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/init/aemet/historical-data")
async def initialize_aemet_historical_data(years_back: int = 3):
    """🌤️ Carga de datos históricos meteorológicos de AEMET
    
    Descarga datos meteorológicos oficiales de AEMET (Agencia Estatal de Meteorología)
    para la estación de Linares, Jaén (5279X).
    
    Args:
        years_back: Años hacia atrás para cargar (default: 3)
        
    Expected:
        - ~1,095 registros diarios (3 años × 365 días)  
        - Datos oficiales españoles de temperatura, humedad, presión
        - Duración: 15-30 minutos (chunks de 3 años por limitación API)
        
    Limitaciones AEMET API:
        - Máximo 5 años por consulta
        - Rate limits por API key
        - Datos climatológicos diarios disponibles desde 1920
    """
    try:
        logger.info("Starting AEMET historical data initialization...")
        
        async with InitializationService() as init_service:
            stats = await init_service.initialize_aemet_historical_data(years_back)
            
            return {
                "🏭": "TFM Chocolate Factory - AEMET Historical Data",
                "status": "✅ Completed",
                "data_source": "AEMET (Agencia Estatal de Meteorología)",
                "station": "5279X - Linares, Jaén",
                "years_loaded": years_back,
                "weather_records_written": stats.aemet_historical_records,
                "duration_seconds": stats.total_duration_seconds,
                "errors": stats.errors if stats.errors else None,
                "timestamp": datetime.now().isoformat(),
                "next_steps": {
                    "verify_data": "GET /init/aemet/status",
                    "complete_historical": "POST /init/complete-historical-data",
                    "start_operations": "POST /ingest-now with hybrid weather"
                }
            }
    
    except Exception as e:
        logger.error(f"Failed to initialize AEMET historical data: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/init/complete-historical-data")
async def initialize_complete_historical_data():
    """📊🌤️ Inicialización completa de datos históricos: REE + AEMET
    
    Carga completa de datos históricos para MLflow:
    - REE: Precios eléctricos post-COVID (2022-2024) ~17,520 registros
    - AEMET: Datos meteorológicos (3 años) ~1,095 registros
    
    Duración estimada: 45-90 minutos
    """
    try:
        logger.info("Starting complete historical data initialization...")
        
        async with InitializationService() as init_service:
            stats = await init_service.initialize_complete_historical_data()
            
            return {
                "🏭": "TFM Chocolate Factory - Complete Historical Data",
                "status": "✅ Completed",
                "data_sources": {
                    "REE": "Precios eléctricos españoles (Red Eléctrica de España)",
                    "AEMET": "Datos meteorológicos oficiales (Linares, Jaén)"
                },
                "results": {
                    "ree_records_written": stats.historical_ree_records,
                    "aemet_records_written": stats.aemet_historical_records,
                    "total_records": stats.historical_ree_records + stats.aemet_historical_records
                },
                "duration_seconds": stats.total_duration_seconds,
                "errors": stats.errors if stats.errors else None,
                "timestamp": datetime.now().isoformat(),
                "mlflow_ready": {
                    "status": "✅ Ready for ML model training",
                    "feature_coverage": "REE prices + AEMET weather (3 years)",
                    "recommended_models": [
                        "Chocolate production optimization",
                        "Energy cost prediction",
                        "Weather-based quality control"
                    ]
                }
            }
    
    except Exception as e:
        logger.error(f"Failed to initialize complete historical data: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/init/aemet/status")
async def get_aemet_initialization_status():
    """🌤️ Estado de inicialización de datos históricos AEMET"""
    try:
        async with HistoricalDataIngestion() as ingestion:
            weather_status = await ingestion.check_existing_weather_data()
            
            return {
                "🏭": "TFM Chocolate Factory - AEMET Status",
                "data_source": "AEMET (Agencia Estatal de Meteorología)", 
                "station": "5279X - Linares, Jaén",
                "weather_data": weather_status,
                "recommendations": {
                    "load_historical": weather_status.get("needs_weather_historical_load", True),
                    "endpoint": "POST /init/aemet/historical-data?years_back=3"
                },
                "timestamp": datetime.now().isoformat()
            }
    
    except Exception as e:
        logger.error(f"Failed to get AEMET status: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/init/datosclima/etl")
async def init_datosclima_etl(station_id: str = "5279X", years: int = 5):
    """🌍 ETL process using datosclima.es CSV data for historical weather"""
    try:
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from services.datosclima_etl import DatosClimaETL
        
        logger.info(f"🌍 Starting DatosClima ETL for station {station_id}")
        
        etl = DatosClimaETL()
        stats = await etl.download_and_process_station(station_id, years)
        
        return {
            "🏭": "TFM Chocolate Factory - DatosClima ETL",
            "status": "✅ ETL Completed",
            "data_source": "datosclima.es",
            "station": f"{station_id} - Linares, Jaén",
            "processing_results": {
                "total_records": stats.total_records,
                "successful_writes": stats.successful_writes,
                "failed_writes": stats.failed_writes,
                "validation_errors": stats.validation_errors,
                "success_rate": f"{stats.success_rate:.1f}%"
            },
            "timestamp": datetime.now().isoformat(),
            "next_steps": {
                "verify_data": "GET /init/status",
                "check_influxdb": "GET /influxdb/verify",
                "proceed_mlflow": "Data ready for ML models"
            }
        }
        
    except Exception as e:
        logger.error(f"DatosClima ETL failed: {e}")
        return {
            "status": "❌ ETL Failed",
            "error": str(e),
            "note": "Check logs for details"
        }




if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

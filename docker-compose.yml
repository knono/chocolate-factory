# =============================================================================
# TFM CHOCOLATE FACTORY - DOCKER COMPOSE
# =============================================================================
# Arquitectura de 4 contenedores para la simulación y monitoreo
# de la fábrica de chocolate
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # 1. EL CEREBRO AUTÓNOMO - FastAPI + APScheduler
  # ---------------------------------------------------------------------------
  fastapi-app:
    build:
      context: .
      dockerfile: docker/fastapi.Dockerfile
    container_name: chocolate_factory_brain
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TZ=${TZ:-Europe/Madrid}
      - PYTHONPATH=/app
      # APIs Externas
      - REE_API_TOKEN=${REE_API_TOKEN}
      - AEMET_API_KEY=${AEMET_API_KEY}
      - OPENWEATHERMAP_API_KEY=${OPENWEATHERMAP_API_KEY}
      # Conexiones internas Docker
      - INFLUXDB_URL=${INFLUXDB_URL_DOCKER}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
    volumes:
      - ./data:/app/data
      - ./src/configs:/app/configs
      - ./docker/services/fastapi/logs:/app/logs
      - ./models:/app/models
      - ./scripts:/app/scripts
    depends_on:
      - influxdb
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # 2. EL ALMACÉN PRINCIPAL - InfluxDB
  # ---------------------------------------------------------------------------
  influxdb:
    image: influxdb:2.7
    container_name: chocolate_factory_storage
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_ADMIN_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - ./docker/services/influxdb/data:/var/lib/influxdb2
      - ./docker/services/influxdb/config:/etc/influxdb2
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # ---------------------------------------------------------------------------
  # 5. EL MONITOR - Dashboard integrado en FastAPI (Reflex reemplaza Node-RED)
  # ---------------------------------------------------------------------------
  # Dashboard ahora servido desde http://localhost:8000/dashboard

# =============================================================================
# ESTRUCTURA DE DIRECTORIOS PARA BIND MOUNTS
# =============================================================================
# Los datos ahora se mapean directamente a ./docker/services/[servicio]
# para acceso directo, backups y monitoreo en tiempo real

# =============================================================================
# RED INTERNA
# =============================================================================
networks:
  backend:
    driver: bridge
    driver_opts:
      # evita fragmentación sobre Tailscale
      com.docker.network.driver.mtu: "1280"
    ipam:
      driver: default
      config:
        - subnet: "192.168.100.0/24"
# =============================================================================
# TFM CHOCOLATE FACTORY - DOCKER COMPOSE
# =============================================================================
# Arquitectura de 4 contenedores para la simulación y monitoreo
# de la fábrica de chocolate
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # 1. EL CEREBRO AUTÓNOMO - FastAPI + APScheduler
  # ---------------------------------------------------------------------------
  fastapi-app:
    build:
      context: .
      dockerfile: docker/fastapi.Dockerfile
    container_name: chocolate_factory_brain
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TZ=${TZ:-Europe/Madrid}
      - PYTHONPATH=/app
      # APIs Externas (usando Docker Secrets)
      - REE_API_TOKEN_FILE=/run/secrets/ree_api_token
      - AEMET_API_KEY_FILE=/run/secrets/aemet_api_key
      - OPENWEATHERMAP_API_KEY_FILE=/run/secrets/openweathermap_api_key
      - ANTHROPIC_API_KEY_FILE=/run/secrets/anthropic_api_key  # Sprint 11: Chatbot BI
      # Conexiones internas Docker
      - INFLUXDB_URL=${INFLUXDB_URL_DOCKER}
      - INFLUXDB_TOKEN_FILE=/run/secrets/influxdb_token
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
    volumes:
      - ./data:/app/data
      - ./src/configs:/app/configs
      - ./src/fastapi-app/services:/app/services  # Bind mount completo del directorio services
      - ./src/fastapi-app/main.py:/app/main.py
      - ./docker/services/fastapi/logs:/app/logs
      - ./models:/app/models
      - ./scripts:/app/scripts
      - ./.claude:/app/.claude  # Business logic rules and settings
      # Sprint 03: Service Layer architecture (legacy - will be migrated to Phase 1 structure)
      # - ./src/api:/app/api
      # - ./src/services:/app/src_services
      # - ./src/repositories:/app/repositories
      # - ./src/core:/app/core
      # - ./src/models:/app/src_models
      # - ./src/ml:/app/ml
      # Sprint 05: Static dashboard files
      - ./static:/app/static
      # Phase 1: Clean Architecture foundation (api_architect refactoring)
      - ./src/fastapi-app/api:/app/api
      - ./src/fastapi-app/domain:/app/domain
      - ./src/fastapi-app/infrastructure:/app/infrastructure
      - ./src/fastapi-app/core:/app/core
      - ./src/fastapi-app/tasks:/app/tasks
      - ./src/fastapi-app/dependencies.py:/app/dependencies.py
      - ./src/fastapi-app/test_foundation.py:/app/test_foundation.py
      - ./src/fastapi-app/test_infrastructure.py:/app/test_infrastructure.py
      - ./src/fastapi-app/test_architecture.py:/app/test_architecture.py
    secrets:
      - ree_api_token
      - aemet_api_key
      - openweathermap_api_key
      - anthropic_api_key
      - influxdb_token
    depends_on:
      - influxdb
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # 2. EL ALMACÉN PRINCIPAL - InfluxDB
  # ---------------------------------------------------------------------------
  influxdb:
    image: influxdb:2.7
    container_name: chocolate_factory_storage
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_ADMIN_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD_FILE=/run/secrets/influxdb_admin_password
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN_FILE=/run/secrets/influxdb_token
    volumes:
      - ./docker/services/influxdb/data:/var/lib/influxdb2
      - ./docker/services/influxdb/config:/etc/influxdb2
    secrets:
      - influxdb_token
      - influxdb_admin_password
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # ---------------------------------------------------------------------------
  # 5. EL MONITOR - Dashboard integrado en FastAPI (Reflex reemplaza Node-RED)
  # ---------------------------------------------------------------------------
  # Dashboard ahora servido desde http://localhost:8000/dashboard

# =============================================================================
# ESTRUCTURA DE DIRECTORIOS PARA BIND MOUNTS
# =============================================================================
# Los datos ahora se mapean directamente a ./docker/services/[servicio]
# para acceso directo, backups y monitoreo en tiempo real

# =============================================================================
# DOCKER SECRETS
# =============================================================================
secrets:
  ree_api_token:
    file: ./docker/secrets/ree_api_token.txt
  aemet_api_key:
    file: ./docker/secrets/aemet_api_key.txt
  openweathermap_api_key:
    file: ./docker/secrets/openweathermap_api_key.txt
  anthropic_api_key:
    file: ./docker/secrets/anthropic_api_key.txt
  influxdb_token:
    file: ./docker/secrets/influxdb_token.txt
  influxdb_admin_password:
    file: ./docker/secrets/influxdb_admin_password.txt

# =============================================================================
# RED INTERNA
# =============================================================================
networks:
  backend:
    driver: bridge
    driver_opts:
      # evita fragmentación sobre Tailscale
      com.docker.network.driver.mtu: "1280"
    ipam:
      driver: default
      config:
        - subnet: "192.168.100.0/24"
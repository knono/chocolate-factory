#!/bin/bash

# Real Data Verification Script - TFM Chocolate Factory
# No bullshit, only facts

clear
echo "üîç VERIFICACI√ìN REAL DE DATOS - TFM CHOCOLATE FACTORY"
echo "===================================================="
echo "üìÖ $(date)"
echo ""

# 1. Container verification
echo "1Ô∏è‚É£ CONTAINERS:"
if docker ps | grep -q chocolate_factory_storage; then
    echo "  ‚úÖ InfluxDB: Running"
else
    echo "  ‚ùå InfluxDB: Down"
    exit 1
fi

if docker ps | grep -q chocolate_factory_brain; then
    echo "  ‚úÖ FastAPI: Running"
else
    echo "  ‚ùå FastAPI: Down"
    exit 1
fi

# 2. Data size verification
echo ""
echo "2Ô∏è‚É£ DATA SIZE:"
CURRENT_SIZE=$(du -sh docker/services/influxdb/data/engine/ | cut -f1)
echo "  üìä Current size: $CURRENT_SIZE"

if [[ "$CURRENT_SIZE" == "29M" ]]; then
    echo "  ‚ö†Ô∏è  SIZE UNCHANGED - No new data ingested"
else
    echo "  üìà SIZE CHANGED - Data ingestion working"
fi

# 3. API verification
echo ""
echo "3Ô∏è‚É£ API ENDPOINTS:"

# REE current
if curl -s http://localhost:8000/ree/prices > /dev/null; then
    echo "  ‚úÖ REE API: Working"
else
    echo "  ‚ùå REE API: Failed"
fi

# AEMET current  
if curl -s http://localhost:8000/aemet/weather > /dev/null; then
    echo "  ‚úÖ AEMET Current: Working"
else
    echo "  ‚ùå AEMET Current: Failed"
fi

# InfluxDB direct
if curl -s http://localhost:8086/health > /dev/null; then
    echo "  ‚úÖ InfluxDB Direct: Working"
else
    echo "  ‚ùå InfluxDB Direct: Failed"
fi

# 4. Record count verification
echo ""
echo "4Ô∏è‚É£ RECORD COUNTS:"

# Get real record counts
REE_COUNT=$(curl -s "http://localhost:8000/init/status" | jq '.status.historical_ree_records' 2>/dev/null || echo "ERROR")
WEATHER_COUNT=$(curl -s "http://localhost:8000/init/status" | jq '.status.historical_weather_records' 2>/dev/null || echo "ERROR")

echo "  üìä REE Records: $REE_COUNT"
echo "  üå§Ô∏è Weather Records: $WEATHER_COUNT"

# 5. Expected vs actual
echo ""
echo "5Ô∏è‚É£ REALITY CHECK:"
if [[ "$REE_COUNT" -gt 10000 ]]; then
    echo "  ‚úÖ REE Data: Substantial ($REE_COUNT records)"
else
    echo "  ‚ùå REE Data: Insufficient ($REE_COUNT records)"
fi

if [[ "$WEATHER_COUNT" -gt 1000 ]]; then
    echo "  ‚úÖ Weather Data: Substantial ($WEATHER_COUNT records)"
else
    echo "  ‚ùå Weather Data: Insufficient ($WEATHER_COUNT records)"
fi

# 6. Storage efficiency check
echo ""
echo "6Ô∏è‚É£ STORAGE EFFICIENCY:"
TOTAL_RECORDS=$((REE_COUNT + WEATHER_COUNT))
if [[ $TOTAL_RECORDS -gt 0 ]]; then
    # Rough calculation: 29MB / total records
    BYTES_PER_RECORD=$((29 * 1024 * 1024 / TOTAL_RECORDS))
    echo "  üìà Total Records: $TOTAL_RECORDS"
    echo "  üíæ Bytes per record: ~$BYTES_PER_RECORD"
    
    if [[ $BYTES_PER_RECORD -lt 10000 ]]; then
        echo "  ‚úÖ Storage efficiency: Good"
    else
        echo "  ‚ö†Ô∏è  Storage efficiency: High overhead"
    fi
else
    echo "  ‚ùå No records to analyze"
fi

echo ""
echo "üéØ CONCLUSION:"
if [[ "$REE_COUNT" -gt 10000 && "$CURRENT_SIZE" != "29M" ]]; then
    echo "  ‚úÖ Data ingestion working - Ready for MLflow"
elif [[ "$REE_COUNT" -gt 10000 ]]; then
    echo "  ‚ö†Ô∏è  REE working, Weather failed - Partial ready"
else
    echo "  ‚ùå Data ingestion failed - NOT ready for MLflow"
fi

echo ""
echo "üìù NEXT ACTIONS:"
if [[ "$WEATHER_COUNT" -lt 1000 ]]; then
    echo "  üîß Weather data insufficient - Use synthetic or OpenWeatherMap"
fi

if [[ "$REE_COUNT" -gt 10000 ]]; then
    echo "  üöÄ REE data sufficient - Can proceed with energy models"
fi

echo ""
echo "‚è∞ Verification completed at $(date)"
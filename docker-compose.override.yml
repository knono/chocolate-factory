# =============================================================================
# CHOCOLATE FACTORY - TAILSCALE SIDECAR OVERRIDE
# =============================================================================
# Configuración para sidecar real que se une a tailnet como 'factory-chocolate'
# Solo expone /dashboard - sin puertos al host
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # SIDECAR TAILSCALE - Dispositivo independiente en tailnet
  # ---------------------------------------------------------------------------
  chocolate-factory:
    build:
      context: .
      dockerfile: docker/tailscale-sidecar.Dockerfile
    container_name: chocolate-factory
    hostname: chocolate-factory
    networks:
      - backend
    # SIN PUERTOS EXPUESTOS - El sidecar maneja su propia red Tailscale
    # ports: []  # Intencionalmente vacío - acceso solo vía tailnet
    environment:
      # REQUIRED: Tailscale Auth Key (debe ser generado por el usuario)
      - TAILSCALE_AUTHKEY=${TAILSCALE_AUTHKEY}
      - TAILSCALE_HOSTNAME=chocolate-factory
      - TAILSCALE_DOMAIN=${TAILSCALE_DOMAIN}
      - NGINX_UPSTREAM=chocolate_factory_brain:8000
      - TAILSCALE_STATE_DIR=/var/lib/tailscale
    volumes:
      # Persistir estado de Tailscale para reconexiones
      - tailscale_state:/var/lib/tailscale
      # Logs para debugging
      - ./logs/sidecar:/var/log
      # Bind mount nginx config template for dynamic updates
      - ./docker/sidecar-nginx.conf:/etc/nginx/nginx.conf.template:ro
    depends_on:
      - fastapi-app
    restart: unless-stopped
    # Privilegios necesarios para Tailscale
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    devices:
      - /dev/net/tun
    healthcheck:
      test: ["CMD-SHELL", "curl -f -s https://${TAILSCALE_DOMAIN}/dashboard || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ---------------------------------------------------------------------------
  # NODO TAILSCALE - GIT/CI/CD
  # ---------------------------------------------------------------------------
  git:
    image: tailscale/tailscale:latest
    container_name: tailscale_git
    hostname: git
    networks:
      - backend
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTHKEY_GIT}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ACCEPT_DNS=true
    volumes:
      - tailscale_git_state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    restart: unless-stopped
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    devices:
      - /dev/net/tun

  # ---------------------------------------------------------------------------
  # FORGEJO - Git Server accesible local + Tailnet
  # ---------------------------------------------------------------------------
  forgejo:
    image: codeberg.org/forgejo/forgejo:1.21
    container_name: chocolate_factory_git_server
    hostname: forgejo
    networks:
      - backend
    ports:
      - "3000:3000"  # HTTP UI - acceso local
      - "2222:22"    # SSH git - acceso local
    environment:
      - USER_UID=1000
      - USER_GID=1000
    volumes:
      - forgejo_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    depends_on:
      - git

  # ---------------------------------------------------------------------------
  # GITEA ACTIONS RUNNER - DESARROLLO
  # ---------------------------------------------------------------------------
  gitea-runner-dev:
    image: gitea/act_runner:latest
    container_name: chocolate_factory_runner_dev
    networks:
      - backend
    environment:
      - GITEA_INSTANCE_URL=http://forgejo:3000
      - GITEA_RUNNER_REGISTRATION_TOKEN=${RUNNER_TOKEN_DEV}
      - GITEA_RUNNER_NAME=chocolate-dev-runner
      - GITEA_RUNNER_LABELS=dev,ubuntu-latest:docker://node:20-bookworm,ubuntu-22.04:docker://node:20-bookworm
    volumes:
      - gitea_runner_dev_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - forgejo

  # ---------------------------------------------------------------------------
  # GITEA ACTIONS RUNNER - PRODUCCIÓN
  # ---------------------------------------------------------------------------
  gitea-runner-prod:
    image: gitea/act_runner:latest
    container_name: chocolate_factory_runner_prod
    networks:
      - backend
    environment:
      - GITEA_INSTANCE_URL=http://forgejo:3000
      - GITEA_RUNNER_REGISTRATION_TOKEN=${RUNNER_TOKEN_PROD}
      - GITEA_RUNNER_NAME=chocolate-prod-runner
      - GITEA_RUNNER_LABELS=prod,ubuntu-latest:docker://node:20-bookworm,ubuntu-22.04:docker://node:20-bookworm
    volumes:
      - gitea_runner_prod_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - forgejo

  # ---------------------------------------------------------------------------
  # NODO TAILSCALE - DESARROLLO
  # ---------------------------------------------------------------------------
  chocolate-factory-dev:
    image: tailscale/tailscale:latest
    container_name: tailscale_dev
    hostname: chocolate-factory-dev
    networks:
      - backend
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTHKEY_DEV}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ACCEPT_DNS=true
    volumes:
      - tailscale_dev_state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    restart: unless-stopped
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    devices:
      - /dev/net/tun

  # ---------------------------------------------------------------------------
  # SERVICIOS EXISTENTES - Sin cambios de puertos
  # ---------------------------------------------------------------------------

  # FastAPI: Mantener puertos para desarrollo local
  fastapi-app:
    ports:
      - "${FASTAPI_PORT:-8000}:8000"    # Mantener para desarrollo

  # InfluxDB: Mantener puerto para administración
  influxdb:
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"   # Mantener para administración
    

# =============================================================================
# VOLÚMENES PERSISTENTES
# =============================================================================
volumes:
  # Estado persistente de Tailscale para reconexiones
  tailscale_state:
    driver: local
  tailscale_git_state:
    driver: local
  tailscale_dev_state:
    driver: local
  # Forgejo data
  forgejo_data:
    driver: local
  # Gitea Actions Runners data
  gitea_runner_dev_data:
    driver: local
  gitea_runner_prod_data:
    driver: local

# =============================================================================
# RED OPTIMIZADA PARA TAILSCALE
# =============================================================================
networks:
  backend:
    driver: bridge
    driver_opts:
      # MTU optimizado para Tailscale - evita fragmentación
      com.docker.network.driver.mtu: "1280"
    ipam:
      driver: default
      config:
        - subnet: "192.168.100.0/24"
          gateway: "192.168.100.1"